type TShirt @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: public, provider: iam, operations: [read]},
  { allow: public, provider: apiKey, operations: [read]}]) {
  id: ID! @primaryKey
  styleNumber: String!
  brand: String!
  color: String!
  size: TShirtSize!
  type: TShirtType!
  quantityOnHand: Int! @default(value: "0")
  isDeleted: Boolean @default(value: "false")
  indexField: String @default(value: "TShirtIndexField") @index(name: "tshirtsByQty", queryField: "tshirtsByQty", sortKeyFields: ["quantityOnHand"])
}

enum TShirtSize {
  NB
  SixMonths
  TwelveMonths
  EighteenMonths
  TwentyFourMonths
  TwoT
  ThreeT
  FourT
  FiveToSixT
  YXS
  YS
  YM
  YL
  YXL
  AXS
  AS
  AM
  AL
  AXL
  TwoX
  ThreeX
  FourX
  FiveX
  OS
}

enum TShirtType {
  Cotton
  Drifit
  Blend
}

type PurchaseOrder @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: public, provider: iam, operations: [create, read]},
  { allow: public, provider: apiKey, operations: [create, read]}]) {
  id: ID! @primaryKey
  orderNumber: String!
  vendor: String!
  orderedItems: [TShirtOrder!] @hasMany
  orderNotes: String
  status: POStatus!
  changeHistory: [OrderChange!] @hasMany

  taxRate: Float!
  shipping: Float!
  shippingAddress: String
  fees: Float!
  dateExpected: AWSDateTime!

  isDeleted: Boolean @default(value: "false")
  type: String @default(value: "PurchaseOrder") @index(name: "purchaseOrdersByCreatedAt", queryField: "purchaseOrdersByCreatedAt", sortKeyFields: ["createdAt"])
  createdAt: String!
  updatedAt: String!
}

enum POStatus {
  Open
  Closed
  SentToVendor
}

type FieldChange {
  oldValue: String!
  newValue: String!
  fieldName: String!
}

# Using this for ANY type of entity auditing: tshirt or order was updated
# potentially can rename this to EntityAudit
type OrderChange @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: public, provider: iam, operations: [read]},
  { allow: public, provider: apiKey, operations: [read]}]) {
  tshirt: TShirt! @hasOne
  reason: String!
  fieldChanges: [FieldChange!]!
  createdAt: String!
  indexField: String @index(name: "orderChangesByCreatedAt", queryField: "orderChangesByCreatedAt", sortKeyFields: ["createdAt"])
}

type POReceival {
  timestamp: AWSDateTime!
  quantity: Int!
}

type TShirtOrder @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: public, provider: iam, operations: [read]},
  { allow: public, provider: apiKey, operations: [read]}]) {
  tshirt: TShirt! @hasOne
  quantity: Int!
  amountReceived: Int @default(value: "0") # This is only used for PurchaseOrder
  receivals: [POReceival!]
  costPerUnit: Float!

  indexField: String @index(name: "tshirtOrderByUpdatedAt", queryField: "tshirtOrderByUpdatedAt", sortKeyFields: ["updatedAt"])
  updatedAt: String!
  isDeleted: Boolean @default(value: "false")
}

type CustomerOrder @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
  { allow: public, provider: iam, operations: [create, read]},
  { allow: public, provider: apiKey, operations: [create, read]}]) {
  id: ID! @primaryKey

  customerName: String!
  customerEmail: AWSEmail
  customerPhoneNumber: AWSPhone

  orderedItems: [TShirtOrder!] @hasMany
  orderNumber: String!
  orderStatus: CustomerOrderStatus!
  orderNotes: String

  dateNeededBy: AWSDateTime!
  changeHistory: [OrderChange!] @hasMany

  taxRate: Float!

  isDeleted: Boolean @default(value: "false")
  type: String @default(value: "CustomerOrder") @index(name: "customerOrdersByCreatedAt", queryField: "customerOrdersByCreatedAt", sortKeyFields: ["createdAt"])
  createdAt: String!
  updatedAt: String!
}

enum CustomerOrderStatus {
  NEW
  IN_PROGRESS
  BLOCKED
  COMPLETED
}

type LastItemValue {
  aggregateValue: Float!
  itemId: ID!

  tshirtStyleNumber: String!
  tshirtColor: String!
  tshirtSize: TShirtSize!

  earliestUnsold: AWSDateTime! # This is the head of the 'queue'

  numUnsold: Int!
  inventoryQty: Int!
}

type InventoryValueCache @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
   { allow: public, provider: iam, operations: [create, read]},
   { allow: public, provider: apiKey, operations: [create, read]}]) {

    lastItemValues: [LastItemValue!]!
    createdAt: AWSDate! @primaryKey
}

# Single value table to hold the earliest expired 
type CacheExpiration @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools},
   { allow: public, provider: iam, operations: [create, read]},
   { allow: public, provider: apiKey, operations: [create, read, update]}]) {
    id: String! @primaryKey
    earliestExpiredDate: String
}