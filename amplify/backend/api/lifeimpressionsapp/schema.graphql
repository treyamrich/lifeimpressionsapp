type TShirt @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}]) {
  id: ID! @primaryKey
  styleNumber: String!
  brand: String!
  color: String!
  size: TShirtSize!
  type: TShirtType!
  quantityOnHand: Int @default(value: "0")
  isDeleted: Boolean @default(value: "false")
}

enum TShirtSize {
  NB
  SixMonths
  TwelveMonths
  EighteenMonths
  TwoT
  ThreeT
  FourT
  FiveT
  YXS
  YS
  YM
  YL
  YXL
  AS
  AM
  AL
  AXL
  TwoX
  ThreeX
  FourX
  FiveX
}

enum TShirtType {
  Cotton
  Drifit
  Blend
}

type PurchaseOrder @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}]) {
  id: ID!
  orderNumber: String!
  vendor: String!
  orderedItems: [TShirtOrder!] @hasMany
  status: POStatus!
  changeHistory: [OrderChange!] @hasMany

  isDeleted: Boolean @default(value: "false")
  type: String @default(value: "PurchaseOrder") @index(name: "purchaseOrdersByCreatedAt", queryField: "purchaseOrdersByCreatedAt", sortKeyFields: ["createdAt"])
  createdAt: String!
}

enum POStatus {
  Open
  Closed
}

type OrderChange @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}]) {
  tshirt: TShirt! @hasOne
  reason: String!

  oldValue: String!
  newValue: String!
  fieldName: String!
}

type TShirtOrder @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}]) {
  tshirt: TShirt! @hasOne
  quantity: Int!
  amountReceived: Int @default(value: "0") # This is only used for PurchaseOrder
  costPerUnit: Float!
}

type CustomerOrder @model @auth(rules: [
  { allow: groups, groups: ["admin"], provider: userPools}]) {
  id: ID!

  customerName: String!
  customerEmail: AWSEmail
  customerPhoneNumber: AWSPhone

  orderedItems: [TShirtOrder!] @hasMany
  orderNumber: String!
  orderStatus: CustomerOrderStatus!
  orderNotes: String

  dateNeededBy: AWSDateTime!
  changeHistory: [OrderChange!] @hasMany

  isDeleted: Boolean @default(value: "false")
  type: String @default(value: "CustomerOrder") @index(name: "customerOrdersByCreatedAt", queryField: "customerOrdersByCreatedAt", sortKeyFields: ["createdAt"])
  createdAt: String!
}

enum CustomerOrderStatus {
  NEW
  IN_PROGRESS
  BLOCKED
  COMPLETED
}